#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

struct polinom;
typedef struct polinom* Pozicija;
struct polinom {
	int exp;
	int koef;
	Pozicija next;
};

void citajDatoteku(char*, Pozicija);
void unos(int, int, Pozicija);
void unosSort(int, int, Pozicija);
void ispis(Pozicija);
void zbroj(Pozicija, Pozicija, Pozicija);
void pojednostavni(Pozicija);
void produkt(Pozicija, Pozicija, Pozicija);

int main() {
	struct polinom P1, P2, P3, P4;
	P1.next = NULL;
	P2.next = NULL;
	P3.next = NULL;
	P4.next = NULL;

	citajDatoteku("polinom1.txt", &P1);
	citajDatoteku("polinom2.txt", &P2);
	pojednostavni(&P1);
	pojednostavni(&P2);
	printf("P1 = ");
	ispis(P1.next);
	printf("P2 = ");
	ispis(P2.next);

	zbroj(P1.next, P2.next, &P3);
	printf("P1 + P2 = ");
	ispis(P3.next);

	produkt(&P1, &P2, &P4);
	printf("P1 * P2 = ");
	pojednostavni(&P4);
	ispis(P4.next);

	return 0;
}

void citajDatoteku(char* file, Pozicija P) {
	int koeficijent, eksponent;
	FILE* fp;
	fp = fopen(file, "r");

	while (!feof(fp)) {
		fscanf(fp, "%d %d", &koeficijent, &eksponent);
		unosSort(koeficijent, eksponent, P);
	}
}

void unos(int koef, int exp, Pozicija P) {
	Pozicija q;
	q = (Pozicija)malloc(sizeof(struct polinom));

	q->koef = koef;
	q->exp = exp;

	q->next = P->next;
	P->next = q;
}

void unosSort(int koef, int exp, Pozicija P) {
	while (P->next != NULL && P->next->exp < exp) {
		P = P->next;
	}
	unos(koef, exp, P);
}

void ispis(Pozicija P) {
	printf("%d * x^%d ", P->koef, P->exp);
	P = P->next;

	while (P != NULL) {
			printf("+ %d * x^%d ", P->koef, P->exp);
			P = P->next;
	}
	printf("\n - - - - - - - - - - - - - - - - - - - \n");
}

void zbroj(Pozicija P1, Pozicija P2, Pozicija P3) {
	int koef, exp;
	while (P1 != NULL || P2 != NULL) {
		if (P1 == NULL) {
			exp = P2->exp;
			koef = P2->koef;
			P2 = P2->next;
		}
		else if(P2 == NULL){
			exp = P1->exp;
			koef = P1->koef;
			P1 = P1->next;
		}
		else if (P1->exp < P2->exp) {
			exp = P1->exp;
			koef = P1->koef;
			P1 = P1->next;
		}
		else if (P1->exp > P2->exp) {
			exp = P2->exp;
			koef = P2->koef;
			P2 = P2->next;
		}
		else {         // kada je P1->exp == P2->exp
			koef = P1->koef + P2->koef;
			exp = P1->exp;
			P1 = P1->next;
			P2 = P2->next;
		}
		unosSort(koef, exp, P3);
	}
}

void pojednostavni(Pozicija P) {
	Pozicija temp;
	temp = P->next;

	while (temp != NULL) {
		P = temp->next;
		while (P != NULL && temp->exp == P->exp) {
			temp->koef = P->koef + temp->koef;
			P = P->next;
			free(temp->next);
			temp->next = P;
		}
		temp = temp->next;
	}
}

void produkt(Pozicija P1, Pozicija P2, Pozicija P4) {
	int koef, exp, temp;
	P1 = P1->next;
	P2 = P2->next;
	temp = P2;

	while (P1 != NULL) {
		while (P2 != NULL) {
			koef = P1->koef * P2->koef;
			exp = P1->exp + P2->exp;

			unosSort(koef, exp, P4);
			P2 = P2->next;
		}
		P2 = temp;
		P1 = P1->next;
	}
}